error_rate <- sum(wrong) / length(wrong)
error_rate
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.54, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.53, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 4,
threshold = 0.01
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.53, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 10,
threshold = 0.01
)
remove(list = ls())
filename <- file.choose()
Admit <-  read.csv(filename)
? na.omit()
Admit2 <- data.frame(lapply(na.omit(Admit), as.numeric))
#Admit3 <-
#  as.data.frame(lapply(Admit2[, c(2:8)], normalize))
################
mmnorm <- function(x, minx, maxx) {
z <- ((x - minx) / (maxx - minx))
return(z)
}
admit_normalized <- as.data.frame (
cbind(
Serial.No. = Admit2[, 1],
GRE.Score = mmnorm(Admit2[, 2], min(Admit2[, 2]), max(Admit2[, 2]))
,
TOEFL.Score = mmnorm(Admit2[, 3], min(Admit2[, 3]), max(Admit2[, 3]))
,
University.Rating = mmnorm(Admit2[, 4], min(Admit2[, 4]), max(Admit2[, 4]))
,
SOP = mmnorm(Admit2[, 5], min(Admit2[, 5]), max(Admit2[, 5]))
,
LOR = mmnorm(Admit2[, 6], min(Admit2[, 6]), max(Admit2[, 6]))
,
CGPA = mmnorm(Admit2[, 7], min(Admit2[, 7]), max(Admit2[, 7]))
,
Research = mmnorm(Admit2[, 8], min(Admit2[, 8]), max(Admit2[, 8]))
,
Admit..Probability = (Admit2[, 9])
)
)
index <- seq (1, nrow(admit_normalized), by = 5)
test <- admit_normalized[index, ]
test
training <- admit_normalized[-index, ]
training
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 10,
threshold = 0.01
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 10,
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = c(5, 3),
threshold = 0.01,
stepmax=1e6
)
#Admit3 <-
#  as.data.frame(lapply(Admit2[, c(2:8)], normalize))
################
mmnorm <- function(x, minx, maxx) {
z <- ((x - minx) / (maxx - minx))
return(z)
}
admit_normalized <- as.data.frame (
cbind(
Serial.No. = Admit2[, 1],
GRE.Score = mmnorm(Admit2[, 2], min(Admit2[, 2]), max(Admit2[, 2]))
,
TOEFL.Score = mmnorm(Admit2[, 3], min(Admit2[, 3]), max(Admit2[, 3]))
,
University.Rating = mmnorm(Admit2[, 4], min(Admit2[, 4]), max(Admit2[, 4]))
,
SOP = mmnorm(Admit2[, 5], min(Admit2[, 5]), max(Admit2[, 5]))
,
LOR = mmnorm(Admit2[, 6], min(Admit2[, 6]), max(Admit2[, 6]))
,
CGPA = mmnorm(Admit2[, 7], min(Admit2[, 7]), max(Admit2[, 7]))
,
Research = mmnorm(Admit2[, 8], min(Admit2[, 8]), max(Admit2[, 8]))
,
Admit..Probability = (Admit2[, 9])
)
)
index <- seq (1, nrow(admit_normalized), by = 8)
test <- admit_normalized[index, ]
test
training <- admit_normalized[-index, ]
training
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 4,
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
remove(list = ls())
filename <- file.choose()
Admit <-  read.csv(filename)
? na.omit()
Admit2 <- data.frame(lapply(na.omit(Admit), as.numeric))
#Admit3 <-
#  as.data.frame(lapply(Admit2[, c(2:8)], normalize))
################
mmnorm <- function(x, minx, maxx) {
z <- ((x - minx) / (maxx - minx))
return(z)
}
admit_normalized <- as.data.frame (
cbind(
Serial.No. = Admit2[, 1],
GRE.Score = mmnorm(Admit2[, 2], min(Admit2[, 2]), max(Admit2[, 2]))
,
TOEFL.Score = mmnorm(Admit2[, 3], min(Admit2[, 3]), max(Admit2[, 3]))
,
University.Rating = mmnorm(Admit2[, 4], min(Admit2[, 4]), max(Admit2[, 4]))
,
SOP = mmnorm(Admit2[, 5], min(Admit2[, 5]), max(Admit2[, 5]))
,
LOR = mmnorm(Admit2[, 6], min(Admit2[, 6]), max(Admit2[, 6]))
,
CGPA = mmnorm(Admit2[, 7], min(Admit2[, 7]), max(Admit2[, 7]))
,
Research = mmnorm(Admit2[, 8], min(Admit2[, 8]), max(Admit2[, 8]))
,
Admit..Probability = (Admit2[, 9])
)
)
index <- seq (1, nrow(admit_normalized), by = 5)
test <- admit_normalized[index, ]
test
training <- admit_normalized[-index, ]
training
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 4,
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 4,
threshold = 0.05,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 10,
threshold = 0.05,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = 10,
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = c(5,2),
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = c(5,3),
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
remove(list = ls())
filename <- file.choose()
Admit <-  read.csv(filename)
? na.omit()
Admit2 <- data.frame(lapply(na.omit(Admit), as.numeric))
#Admit3 <-
#  as.data.frame(lapply(Admit2[, c(2:8)], normalize))
################
mmnorm <- function(x, minx, maxx) {
z <- ((x - minx) / (maxx - minx))
return(z)
}
admit_normalized <- as.data.frame (
cbind(
Serial.No. = Admit2[, 1],
GRE.Score = mmnorm(Admit2[, 2], min(Admit2[, 2]), max(Admit2[, 2]))
,
TOEFL.Score = mmnorm(Admit2[, 3], min(Admit2[, 3]), max(Admit2[, 3]))
,
University.Rating = mmnorm(Admit2[, 4], min(Admit2[, 4]), max(Admit2[, 4]))
,
SOP = mmnorm(Admit2[, 5], min(Admit2[, 5]), max(Admit2[, 5]))
,
LOR = mmnorm(Admit2[, 6], min(Admit2[, 6]), max(Admit2[, 6]))
,
CGPA = mmnorm(Admit2[, 7], min(Admit2[, 7]), max(Admit2[, 7]))
,
Research = mmnorm(Admit2[, 8], min(Admit2[, 8]), max(Admit2[, 8]))
,
Admit..Probability = (Admit2[, 9])
)
)
index <- seq (1, nrow(admit_normalized), by = 5)
test <- admit_normalized[index, ]
test
training <- admit_normalized[-index, ]
training
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = c(5,3),
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
admit_normalized <- as.data.frame (
cbind(
Serial.No. = Admit2[, 1],
GRE.Score = mmnorm(Admit2[, 2], min(Admit2[, 2]), max(Admit2[, 2]))
,
TOEFL.Score = mmnorm(Admit2[, 3], min(Admit2[, 3]), max(Admit2[, 3]))
,
University.Rating = mmnorm(Admit2[, 4], min(Admit2[, 4]), max(Admit2[, 4]))
,
SOP = mmnorm(Admit2[, 5], min(Admit2[, 5]), max(Admit2[, 5]))
,
LOR = mmnorm(Admit2[, 6], min(Admit2[, 6]), max(Admit2[, 6]))
,
CGPA = mmnorm(Admit2[, 7], min(Admit2[, 7]), max(Admit2[, 7]))
,
Research = mmnorm(Admit2[, 8], min(Admit2[, 8]), max(Admit2[, 8]))
,
Admit..Probability = (Admit2[, 9])
)
)
index <- seq (1, nrow(admit_normalized), by = 5)
test <- admit_normalized[index, ]
test
training <- admit_normalized[-index, ]
training
library("neuralnet")
? neuralnet()
class(training$Admit..Probability)
net_Admit2 <-
neuralnet(
Admit..Probability ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research,
training,
hidden = c(5,2),
threshold = 0.01,
stepmax=1e6
)
#Plot the neural network
plot(net_Admit2)
## test should have only the input colum
ann <-
compute(net_Admit2, test[,-9])
ann$net.result
ann_cat <- ifelse (ann$net.result < 1.5, 1,
ifelse(ann$net.result < 2.5, 2,3
))
length(ann_cat)
table(Actual = test$Admit..Probability, predition = ann_cat)
wrong <- (test$Admit..Probability != ann_cat)
error_rate <- sum(wrong) / length(wrong)
error_rate
